
#include <iostream>
#include <string>
#include <vector>


#include <filesystem>
#include <vector>
#include <json/json.h>
#include <fstream>

#include "geo/silly_geo_utils.h"
#include "string/silly_algorithm.h"


struct headerData
{
	int ncols{ 0 };
	int nrows{ 0 };
	double xllcenter{ 0.0 };
	double yllcenter{ 0.0 };
	double cellsize{ 0.0 };
	int NODATA_value{ 0 };
};


bool TxtToTif(const std::string& input_txt, const std::string& output_tif) 
{
	GDALAllRegister();

	// 打开TXT文件
	std::ifstream inFile;
	inFile.open(input_txt);
	if (!inFile.is_open()) 
	{
		std::cout << "Failed to open TXT file." << std::endl;
		return false;
	}

	// 记录当前文件指针位置
	std::streampos originalPos = inFile.tellg();
	std::vector<float> data;
	// 检测文件是否包含元数据头部
	std::string firstLine;
	std::getline(inFile, firstLine);
	bool hasHeader = firstLine.find("ncols") != std::string::npos;

	GDALDataset* dataset;
	GDALDriver* driver = GetGDALDriverManager()->GetDriverByName("GTiff");

	if (hasHeader)
	{
		headerData metadata;
		inFile.seekg(originalPos); // 如果需要再次读取第一行，将文件指针移回到开头
		std::string key;
		std::string value;
		// 跳过其余元数据行
		for (int i = 0; i < 6; ++i)
		{
			std::getline(inFile, firstLine);
			std::istringstream iss(firstLine);
			if (!(iss >> key >> value))
			{
				continue; // 如果解析失败，则跳过这一行
			}
			if (key == "ncols")
			{
				metadata.ncols = std::stoi(value);
			}
			else if (key == "nrows")
			{
				metadata.nrows = std::stoi(value);
			}
			else if (key == "xllcenter")
			{
				metadata.xllcenter = std::stod(value);
			}
			else if (key == "yllcenter")
			{
				metadata.yllcenter = std::stod(value);
			}
			else if (key == "cellsize")
			{
				metadata.cellsize = std::stod(value);
			}
			else if (key == "NODATA_value")
			{
				metadata.NODATA_value = std::stoi(value);
			}
		}
		// 创建GDAL Dataset
		dataset = driver->Create(output_tif.c_str(), metadata.ncols, metadata.nrows, 1, GDT_Float32, nullptr);
		if (dataset == nullptr) {
			std::cout << "Failed to create TIFF dataset." << std::endl;
			return false;
		}

		//// 设置地理变换参数
		//double geoTransform[6] = { metadata.xllcenter, metadata.cellsize, 0, metadata.yllcenter, 0, -metadata.cellsize };
		//dataset->SetGeoTransform(geoTransform);

		GDALRasterBand* band = dataset->GetRasterBand(1);
		if (band == nullptr) {
			std::cout << "Failed to get raster band." << std::endl;
			GDALClose(dataset);
			return false;
		}

		data.resize(metadata.nrows * metadata.ncols, static_cast<float>(metadata.NODATA_value));
		int rowIndex = 0;
		while (std::getline(inFile, firstLine))
		{
			if (firstLine.empty() || firstLine.front() == '#') continue; // 跳过空行和注释行
			std::istringstream rowStream(firstLine);
			for (int colIndex = 0; colIndex < metadata.ncols && !rowStream.eof(); ++colIndex)
			{
				float value;
				rowStream >> value;
				data[rowIndex * metadata.ncols + colIndex] = value;
			}
			++rowIndex;
		}

		// 写入数据到TIFF
		CPLErr err = band->RasterIO(GF_Write, 0, 0, metadata.ncols, metadata.nrows, data.data(), metadata.ncols, metadata.nrows, GDT_Float32, 0, 0);
		if (err != CE_None)
		{
			std::cout << "Failed to write data to TIFF." << std::endl;
			GDALClose(dataset);
			return false;
		}
	}
	else
	{

		inFile.seekg(originalPos); // 如果需要再次读取第一行，将文件指针移回到开头
		int lineCount = 0; // 统计文件行数
		int colCount = 0;	//统计文件列数
		bool iscolCount = true;
		while (std::getline(inFile, firstLine))
		{
			if (iscolCount)
			{
				std::istringstream iss(firstLine);
				std::string number;
				// 计算第一行的数据列数
				while (iss >> number)
				{
					++colCount;
				}
				iscolCount = false;
			}
			lineCount++;
		}
		inFile.close();
		inFile.open(input_txt);
		if (!inFile.is_open())
		{
			std::cout << "Failed to open TXT file." << std::endl;
			return false;
		}

		int rowIndex = 0;
		std::string Line;
		while (std::getline(inFile, firstLine))
		{
			if (firstLine.empty() || firstLine.front() == '#') continue; // 跳过空行和注释行
			std::istringstream rowStream(firstLine);
			for (int colIndex = 0; colIndex < colCount && !rowStream.eof(); ++colIndex)
			{
				float value;
				rowStream >> value;
				data.push_back(value);
			}
			++rowIndex;
		}

		int b = 0;
		// 创建GDAL Dataset
		dataset = driver->Create(output_tif.c_str(), colCount, lineCount, 1, GDT_Float32, nullptr);
		if (dataset == nullptr) 
		{
			std::cout << "Failed to create TIFF dataset." << std::endl;
			return false;
		}

		GDALRasterBand* band = dataset->GetRasterBand(1);
		if (band == nullptr) 
		{
			std::cout << "Failed to get raster band." << std::endl;
			GDALClose(dataset);
			return false;
		}

		// 写入数据到TIFF
		CPLErr err = band->RasterIO(GF_Write, 0, 0, colCount, lineCount, data.data(), colCount, lineCount, GDT_Float32, 0, 0);
		if (err != CE_None)
		{
			std::cout << "Failed to write data to TIFF." << std::endl;
			GDALClose(dataset);
			return false;
		}
	}


	inFile.close();
	GDALClose(dataset);
	std::cout << "TXT converted to TIFF successfully." << std::endl;
	return true;
}



int main()
{
	geo_utils::init_gdal_env();

	// 有头
	std::string input_txt = "D:/1_wangyingjie/1_文档文件/中国雪深长时间序列数据集（1979-2023）/snow depth/snowdepth-1979/1979001.txt";
	std::string  output_tif = "D:/1_wangyingjie/1_文档文件/中国雪深长时间序列数据集（1979-2023）/snow depth/snowdepth-1979/1979001.tif";

	//// 无头
	//std::string input_txt = "D:/1_wangyingjie/1_文档文件/中国雪深长时间序列数据集（1979-2023）/snow depth/daily snow depth_AMSRE_full/2007/2007002.txt";
	//std::string  output_tif = "D:/1_wangyingjie/1_文档文件/中国雪深长时间序列数据集（1979-2023）/snow depth/daily snow depth_AMSRE_full/2007/2007002.tif";

	if (TxtToTif(input_txt, output_tif))
	{
		std::cout << "Conversion completed successfully." << std::endl;
	}
	else
	{
		std::cout << "Conversion failed." << std::endl;
	}

	return 0;

	geo_utils::destroy_gdal_env();

	return 0;
}


